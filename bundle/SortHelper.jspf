<%@page import="com.google.common.collect.ComparisonChain" %>
<%@page import="com.google.common.collect.Iterables" %>
<%@page import="com.google.common.collect.Ordering" %>
<%@page import="com.google.common.primitives.Ints" %>
<%@page import="com.google.common.base.Function" %>
<%@page import="com.google.common.base.Predicates" %>
<%@page import="com.kineticdata.bundles.Json" %>
<%@page import="java.lang.reflect.Method" %>
<%@page import="com.kineticdata.core.models.base.Model" %>
<%@page import="com.kineticdata.core.models.base.ModelWithAttributes" %>

<%!
    public static class SortHelper {
    
        public SortHelper(){}
       
        /*****************************************************************************************
         * SORT MAPS BY VALUE(S)
         *****************************************************************************************/

        /**
         * Sorts a list of maps by the values of the provided keys
         *
         * @param list List of Maps to sort
         * @param sortParams One or more SortParam objects which specify which key to sort by and the sort order
         *                   If multiple sortParams are passed in, the list will be sorted by the params in the order they are passed in
         * @return Sorted list
         */
        public static <V extends Comparable<? super V>> List<Map<String, V>> sortMaps( List<Map<String, V>> list, final SortParam... sortParams ){
            Collections.sort(list, new Comparator<Map<String, V>>(){
                public int compare( Map<String, V> o1, Map<String, V> o2 ){
                    ComparisonChain chain = ComparisonChain.start();
                    for (SortParam param : sortParams){
                        if (param.getDescending()){
                            chain = chain.compare(o2.get(param.getName()), o1.get(param.getName()), Ordering.natural().nullsLast());
                        }
                        else {
                            chain = chain.compare(o1.get(param.getName()), o2.get(param.getName()), Ordering.natural().nullsLast());                        
                        }
                    }
                    return chain.result();
                }
            });
            return list;
        }

        /*****************************************************************************************
         * SORT MODELS (KAPP, FORM, etc) BY NAME 
         *****************************************************************************************/
        
        /**
         * Sorts a list of Models by the name field in ascending order
         * Acceptable Models: Any that have a name field
         *
         * @param list List of Models to sort
         * @return Sorted list
         */
        public static <M extends Model> List<M> sortByName( List<M> list ){
            return sortByName(list, false);
        }
        
        /**
         * Sorts a list of Models by the name field
         * Acceptable Models: Any that have a name field
         *
         * @param list List of Models to sort
         * @param descending Boolean that specifies sort order: if true, list will be in descending order, otherwise ascending
         * @return Sorted list
         */
        public static <M extends Model> List<M> sortByName( List<M> list, final boolean descending ){
            Collections.sort(list, new Comparator<M>(){
                public int compare( M o1, M o2 ){
                    try {
                        Method m1 = o1.getClass().getMethod("getName");
                        Method m2 = o2.getClass().getMethod("getName");
                        String o1Name = (String)m1.invoke(o1);
                        String o2Name = (String)m2.invoke(o2);
                        ComparisonChain chain = ComparisonChain.start();
                        if (descending){
                            chain = chain.compare(o2Name, o1Name, Ordering.natural().nullsLast());
                        }
                        else {
                            chain = chain.compare(o1Name, o2Name, Ordering.natural().nullsLast());                        
                        }
                        return chain.result();
                    }
                    catch (Exception e){
                        return 0;
                    }
                }
            });
            return list;
        }

        /*****************************************************************************************
         * SORT MODELS (KAPP, FORM, etc) BY ATTRIBUTE VALUE(S) 
         *****************************************************************************************/
        
        /**
         * Sorts a list of Models (which implement ModelWithAttributes) by the attribute values of the provided names
         * Acceptable Models: Space, Kapp, Form, Category, Identity, User
         *
         * @param list List of Models to sort
         * @param sortParams One or more SortParam objects which specify which attributes to sort by and the sort order
         *                   If multiple sortParams are passed in, the list will be sorted by the params in the order they are passed in
         * @return Sorted list
         */
        public static <A extends ModelWithAttributes> List<A> sortByAttribute( List<A> list, final SortParam... sortParams ){
            Collections.sort(list, new Comparator<A>(){
                public int compare( A o1, A o2 ){
                    try {
                        Method m1 = o1.getClass().getMethod("getAttributeValue", String.class);
                        Method m2 = o2.getClass().getMethod("getAttributeValue", String.class);
                        ComparisonChain chain = ComparisonChain.start();
                        for (SortParam param : sortParams){
                            String o1Value = (String)m1.invoke(o1, param.getName());
                            String o2Value = (String)m2.invoke(o2, param.getName());
                            if (param.getDescending()){
                                chain = chain.compare(o2Value, o1Value, Ordering.natural().nullsLast());
                            }
                            else {
                                chain = chain.compare(o1Value, o2Value, Ordering.natural().nullsLast());                        
                            }
                        }

                        return chain.result();
                    }
                    catch (Exception e){
                        return 0;
                    }
                }
            });
            return list;
        }

        /*****************************************************************************************
         * HELPERS FOR BUILDING A SORT PARAM IN JSTL
         *****************************************************************************************/
        
        /**
         * Creates a SortParam with the given name and an ascending sort order
         * This function exists because we can't call the contstructor directly in JSTL
         *
         * @param name Name of attribute or map key to sort on
         * @return SortParam object
         */
        public static SortParam sortBy(String name){
            return new SortParam(name, false);
        }
        
        /**
         * Creates a SortParam with the given name and the given sort order
         * This function exists because we can't call the contstructor directly in JSTL
         *
         * @param name Name of attribute or map key to sort on
         * @param descending If true, sort order will be descending, otherwise sort order will be ascending
         * @return SortParam object
         */
        public static SortParam sortBy(String name, boolean descending){
            return new SortParam(name, descending);
        }

        /*****************************************************************************************
         * SORT PARAM HELPER CLASS
         *****************************************************************************************/
        
        /**
         * Helper class which defines a sort parameter
         * Specifies the name of an attribute or map key to sort by and the sort order (descending or ascending) 
         */
        private static class SortParam {
            private String name;
            private boolean descending;
            
            public SortParam(String name, boolean descending){
                this.name = name;
                this.descending = descending;
            }

            public String getName(){
                return this.name;
            }
         
            public boolean getDescending(){
                return this.descending;
            }
        }
    }
%>
