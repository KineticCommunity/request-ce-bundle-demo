<%@page import="com.kineticdata.bundles.Text" %>
<%!

    public static class SubmissionHelper {

        private HttpServletRequest request;
        private BundleSubmissionComponent submissionComponent;
        private Kapp kapp;
        private Space space;

        public SubmissionHelper(HttpServletRequest request) {
            this.request = request;
            this.submissionComponent = (BundleSubmissionComponent)request.getAttribute("Submissions");
            this.kapp = (Kapp)request.getAttribute("kapp");
            this.space = (Space)request.getAttribute("space");
        }

        public List<Submission> retrieveRecentSubmissions(String type) {
            return retrieveRecentSubmissions(type, null, null);
        }

        public List<Submission> retrieveRecentSubmissions(String type, int number) {
            return retrieveRecentSubmissions(type, null, number);
        }
        
         public List<Submission> retrieveRecentSubmissions(String type, String coreState) {
            return retrieveRecentSubmissions(type, coreState, null);
        }

        public List<Submission> retrieveRecentSubmissions(String type, String coreState, Integer number) {
            com.kineticdata.core.authentication.Identity identity =
                (com.kineticdata.core.authentication.Identity) request.getAttribute("identity");

            java.time.Instant end = Time.now();
            java.time.Instant start = Time
                .subtract(end, 30, "days", java.time.ZoneId.systemDefault());

            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();

            searchOptions.put("end", new String[] {Time.format(end)} );
            searchOptions.put("start", new String[] {Time.format(start)} );
            searchOptions.put("type", new String[] {type});
            if (coreState != null) {
                searchOptions.put("coreState", new String[] {coreState});
            }
            if (number != null) {
                searchOptions.put("limit", new String[] {String.valueOf(number)});
            }
            if("Approval".equals(type) || "Work Order".equals(type)) {
                searchOptions.put("values[Assigned Individual]", new String[] {identity.getUsername()});
            } else {
                searchOptions.put("createdBy", new String[] {identity.getUsername()});
            }

            return submissionComponent.searchByKapp(kapp, searchOptions);
        }

        /**
         * Grabs submissions from the passed kapp + for with passed fields and values
         *
         * type = Form type
         * corestate = Kinetic Request form state (Draft, Submitted, etc.)
         * number = Number of submissions to return
         * days = How many days back to retrieve
         * kapp = The kapp slug (if admin kapp a check is done for Admin Kapp Slug)
         * form = The form slug
         * fields = Array of field names to search against (not core fields)
         * fieldValues = The values to search against in the fields above
         * coreFields = The core fields included with every form (not user generated form fields)
         * coreFieldValues = The values to search against in the core fields above
         */
        public List<Submission> retrieveRecentSubmissions(String type, 
                String coreState, 
                Integer number, 
                Integer days, 
                String kapp, 
                String form, 
                LinkedHashMap fieldsMap) {

            // Check if kapp is admin kapp & try to use attribute otherwise use 'admin' as default
            if(kapp.equals("admin")){
                if(this.space.getAttributeValue("Admin Kapp Slug") != null){
                    kapp = this.space.getAttributeValue("Admin Kapp Slug");
                }
            }
            // Check for date range
            java.time.Instant end = Time.now();
            if(days == null){
                days = 30;
            }
            java.time.Instant start = Time
                .subtract(end, days, "days", java.time.ZoneId.systemDefault());
            // Start options map
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("end", new String[] {Time.format(end)} );
            searchOptions.put("start", new String[] {Time.format(start)} );
            if (Text.isNotBlank(coreState)) {
                searchOptions.put("coreState", new String[] {coreState});
            }
            if (number != null) {
                searchOptions.put("limit", new String[] {String.valueOf(number)});
            }
            if (fieldsMap != null && fieldsMap.get("fields") != null){
                for (Map.Entry<String,String> field : ((LinkedHashMap<String,String>)fieldsMap.get("fields")).entrySet()){
                    searchOptions.put("values["+ field.getKey() +"]", new String[] {field.getValue()});
                }
            }
            if(Text.isNotBlank(type)){
                searchOptions.put("type", new String[] {type});
            }
            // Check if we are using a specific form, then check it exists
            if(form != null){
                BundleHelper checkForm = new BundleHelper((Bundle)request.getAttribute("bundle"), this.kapp, this.space);
                if(!checkForm.checkKappAndForm(kapp, form)){
                    throw new IllegalArgumentException("retrieveRecentSubmissions: Form does not exist.");
                }
            }

            return submissionComponent.searchByForm(space.getKapp( new String(kapp) ).getForm( new String(form)), searchOptions);
        }

        public List<Submission> approvalAlertsSubmissions() {
            com.kineticdata.core.authentication.Identity identity =
                (com.kineticdata.core.authentication.Identity) request.getAttribute("identity");

            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("values[Assigned Individual]", new String[] {identity.getUsername()});
            searchOptions.put("limit", new String[] {"1000"});
            searchOptions.put("type", new String[] {"Approval"});
            searchOptions.put("coreState", new String[] {"Draft"});   

            return submissionComponent.searchByKapp(kapp, searchOptions);
        }

        public List<Submission> broadcastAlertsSubmissions () {
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("limit", new String[] {"1000"});
            searchOptions.put("values[Status]", new String[] {"Active"}); 

            return submissionComponent.searchByForm(space.getKapp( new String("adminkapp") ).getForm( new String("broadcast-alerts")), searchOptions);
        }
        /*public List<Submission> myAssetSubmissions (String fieldName) {
            com.kineticdata.core.authentication.Identity identity =
                (com.kineticdata.core.authentication.Identity) request.getAttribute("identity");

            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("values["+fieldName+"]", new String[] {identity.getUsername()});
            searchOptions.put("limit", new String[] {"1000"});
            searchOptions.put("values[Status]", new String[] {"Active"}); 

            return submissionComponent.searchByForm(space.getKapp( new String("adminkapp") ).getForm( new String("assets")), searchOptions);
        }*/

        public List<Submission> serviceReviewSubmissions(String formSlug) {
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("limit", new String[] {"1000"});
            searchOptions.put("values[Form Slug]", new String[] {formSlug});

            return submissionComponent.searchByForm(kapp.getForm( new String("service-reviews") ), searchOptions);
        }
    }
%>
