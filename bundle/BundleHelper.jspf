<%@page import="org.slf4j.Logger" %>
<%@page import="org.slf4j.LoggerFactory" %>
<%@page import="com.kineticdata.core.exceptions.InvalidContentException" %>
<%!
    public static class BundleHelper {
    
        public static Logger logger = LoggerFactory.getLogger("com.kineticdata.core.BundleInitialization");
        private Bundle bundle;
        private Kapp kapp;
        private Space space;
    
        public BundleHelper(Bundle bundle, Kapp kapp, Space space) {
            this.bundle = bundle;
            this.kapp = kapp;
            this.space = space;
        }
        
        /******************************************************************************************
         *** HEADER NAVIGATION
         ******************************************************************************************/
        
        /**
         * Returns a list of links to display in the header, which are defined as JSON in the 
         * Kapps's "Header Navigation List" attribute. If Kapp is null, checks looks at the Space's
         * "Header Navigation List" attribute. 
         * 
         * Sample "Header Navigation List" value:
         * [
         *   {
         *       "Name": "Link Name",
         *       "Path": "http://www.example.com"
         *   },
         *   {
         *       "Name": "Link Name",
         *       "Kapp": "Optional Kapp Slug" // Defaults to Current Kapp
         *   },
         *   {
         *       "Name": "Link Name",
         *       "Kapp": "Optional Kapp Slug" // Defaults to Current Kapp
         *       "Page": "Optional Page File Name"
         *   }
         * ]
         * 
         * Example useage:
         *  <c:catch var="headerNavigationError">
         *      <c:forEach items="${BundleHelper.headerNavigation}" var="link">
         *          <li>
         *              <a href="${link.path}">${link.name}</a>
         *          </li>
         *      </c:forEach>
         *  </c:catch>
         *  <c:if test="${headerNavigationError ne null}">
         *      <li class="alert alert-danger">${'Error'}</li>
         *  </c:if>
         * 
         * @return List<HeaderNavigationLink> List of link objects!
         */

        public List<HeaderNavigationLink> getHeaderNavigation(){
            // Create container to hold links
            List<HeaderNavigationLink> headerNavigationLinks = new ArrayList<>();
            // Get value of "Header Navigation List" attribute from kapp if exists, else from space
            String headerNavigationAttribute = null;
            if (this.kapp != null){
                headerNavigationAttribute = this.kapp.getAttributeValue("Header Navigation List");
            }
            else {
                headerNavigationAttribute = this.space.getAttributeValue("Header Navigation List");
            }
            // If "Header Navigation List" attribute exists, create links
            if (headerNavigationAttribute != null){
                // Get value of "Header Navigation List" attribute and parse into JSON
                List<LinkedHashMap> headerNavigation = (ArrayList<LinkedHashMap>)Json.parse(headerNavigationAttribute);
                // Iterate through each link in the JSON array of links
                for (LinkedHashMap link : headerNavigation){
                    // If link has a Name, build the link
                    if (link.get("Name") != null){
                        if (link.get("Path") != null){
                            // Add link to path to result list
                            headerNavigationLinks.add(
                                    new HeaderNavigationLink(
                                            (String)link.get("Name"), 
                                            (String)link.get("Path")));
                        }
                        else {
                            // Start path with the space location
                            String path = this.bundle.getSpaceLocation() + "/";
                            // If Kapp is specified, add specified kapp to path
                            if (link.get("Kapp") != null){
                                path += link.get("Kapp");
                            }
                            // Else if in a kapp context, use current kapp
                            else if (this.kapp != null){
                                path += this.kapp.getSlug();
                            }
                            // If Page is specified, add specified page to the path
                            if (link.get("Page") != null){
                                path += "?page=" + link.get("Page");
                            }
                            // Add link to result list
                            headerNavigationLinks.add(
                                    new HeaderNavigationLink(
                                            (String)link.get("Name"), 
                                            path));
                        }
                    }
                }
            }
            // Return links
            return headerNavigationLinks;
        }
        
        /**
         * Helper class which defines an instance of a header link.
         */
        public class HeaderNavigationLink {
            private String name;
            private String path;
            
            public HeaderNavigationLink(String name, String path){
                this.name = name;
                this.path = path;
            }
            
            public String getName(){
                return this.name;
            }
            
            public String getPath(){
                return this.path;
            }
        }

        /**
         * Helper for setting active page
         * 
         * Used on layout.jsp to set a session variable.
         */
        public String getActivePage(String pageParam, String category, String type) {
            // Check for page patrameter
            String activePage = "home";
            if (pageParam.length() > 0){
                if(pageParam.equals("submissions")){
                    activePage = type.equals("approval") ? "approval" : "request";
                }
                else if (pageParam.equals("category") && category.length() > 0){
                    activePage = category;
                } else if(pageParam.equals("dashboard")){
                    activePage = "dashboard";
                }
                return activePage;
            }
            return activePage;
        }

        /**
         * Helper for logo and company name
         * We manage the path to the Logo URL.
         * If the image is an external link we take the value from the Company Logo attribue.
         * If the image is stored locally we add the bundle path so that it does not need to be added in the attribute.
         */
        public String getLogo(Kapp kapp){
            String logoPath = kapp.getAttributeValue("Company Logo");
            if (logoPath == null) {
                logoPath = kapp.getSpace().getAttributeValue("Company Logo");
            }
            if(logoPath.toLowerCase().contains("http")){
                return logoPath;
            }
            else {
                return bundle.getPath() + "/" + logoPath;
            }
        }

        /**
         * Helper for theme skin
         */
        public String getThemeSkin(Kapp kapp){
            String themeSkin = kapp.getAttributeValue("Theme Skin");
            if (themeSkin == null) {
                themeSkin = kapp.getSpace().getAttributeValue("Theme Skin");
            }
            if (themeSkin == null) {
                themeSkin = "skin-purple-light";
            }
            return themeSkin;
        }

        /**
         * Helper for login page background Image
         */
        public String getLoginBackground(Kapp kapp){
            if (kapp.getAttribute("Login Background Image") == null && kapp.getSpace().getAttribute("Login Background Image") == null) {
                return null;
            }
            else {
                String loginBackground = kapp.getAttributeValue("Login Background Image");
                if (loginBackground == null) {
                    loginBackground = kapp.getSpace().getAttributeValue("Login Background Image");
                }
                if(loginBackground.toLowerCase().contains("http")){
                    return "background-image:url(" + loginBackground + "); background-size:100%;";
                }
                else {
                    return "background-image:url(" + bundle.getPath() + "/" + loginBackground + "); background-size:100%;";
                }
            }
        }

        /**
         * Helper for Kapp with Form checks
         */
        public boolean hasForm(String kapp, String form){

            boolean check = false;
            if(kapp.equals("admin")){
                if(this.space.getAttributeValue("Admin Kapp Slug") != null){
                    kapp = this.space.getAttributeValue("Admin Kapp Slug");
                }
            }
            if(this.space.getKapp(kapp) != null){
                if(this.space.getKapp(kapp).getForm(form) != null && this.space.getKapp(kapp).getForm(form).getStatus().equals("Active")){
                    check =  true;
                }
            }
            return check;   
        }        
    }
%>